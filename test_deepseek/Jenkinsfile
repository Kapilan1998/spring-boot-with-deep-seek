pipeline {
  agent any

  tools {
    maven 'Maven3'
  }

  environment {
    DEP_TRACK_API_URL = 'http://localhost:8082/api'
    DEP_TRACK_API_KEY = 'odt_dWinsHFt2G95wGSjLHG5igPmGFpHqtg3'
    SBOM_FILE_PATH = 'test_deepseek/target/bom.xml'
    PROJECT_UUID = '421a9c86-4dcb-46c0-9731-0bc6cc7442f9'
  }

  stages {
  

    stage('Build') {
      steps {
        script {
          try {
            withMaven(maven: 'Maven3') {
            bat 'cd test_deepseek && mvn clean install -DskipTests -Dmaven.test.skip=true'
            }
          } catch (Exception e) {
            currentBuild.result = 'FAILURE'
            throw e
          }
        }
      }
    }

    stage('Generate SBOM') {
      steps {
        withMaven {
          bat 'cd test_deepseek && mvn org.cyclonedx:cyclonedx-maven-plugin:makeAggregateBom'
        }
      }
      post {
        success {
          echo "SBOM file successfully generated!"
        }
        failure {
          echo "SBOM file generation failed!"
        }
        always {
          archiveArtifacts allowEmptyArchive: true, artifacts: 'test_deepseek/target/bom.json'
          archiveArtifacts allowEmptyArchive: true, artifacts: 'test_deepseek/target/bom.xml'
        }
      }
    }

    stage('Upload SBOM to Dependency-Track') {
      steps {
        script {
          if (fileExists(SBOM_FILE_PATH)) {
            echo 'Uploading SBOM to Dependency-Track...'
            bat """
            curl -X "POST" "${DEP_TRACK_API_URL}/v1/bom" ^
              -H "Content-Type: multipart/form-data" ^
              -H "X-API-Key: ${DEP_TRACK_API_KEY}" ^
              -F "autoCreate=false" ^
              -F "project=421a9c86-4dcb-46c0-9731-0bc6cc7442f9" ^
              -F "bom=@${SBOM_FILE_PATH}"
            """
          } else {
            echo "SBOM file not found at ${SBOM_FILE_PATH}!"
          }
        }
      }
      post {
        success {
          echo 'SBOM file successfully uploaded to Dependency-Track!'
        }
        failure {
          echo 'Failed to upload SBOM file to Dependency-Track!'
        }
      }
    }


   stage('Fetch Vulnerability Summary') {
     steps {
       script {
         // Fetch summary from Dependency-Track
         bat """
           curl -s -w "%%{http_code}" -o summary.json ^
             -X GET "${DEP_TRACK_API_URL}/v1/finding/project/${PROJECT_UUID}/summary" ^
             -H "X-API-Key: ${DEP_TRACK_API_KEY}" ^
             -H "Accept: application/json" > curl_status.txt
         """

         // Read HTTP status code
         def httpStatus = readFile('curl_status.txt').trim()
         echo "HTTP Status: ${httpStatus}"

         if (httpStatus != '200') {
           error "Failed to fetch summary. HTTP status: ${httpStatus}"
         }

         // Read JSON safely
         def jsonText = readFile('summary.json').trim()

         if (!jsonText || jsonText.startsWith('<')) {
           error "Invalid response received. Not a valid JSON: \n${jsonText.take(200)}"
         }

         def summary = readJSON text: jsonText

         echo "==== Vulnerability Summary ===="
         echo "CRITICAL: ${summary.critical}"
         echo "HIGH    : ${summary.high}"
         echo "MEDIUM  : ${summary.medium}"
         echo "LOW     : ${summary.low}"
         echo "UNASSIGNED: ${summary.unassigned}"
         echo "================================"
       }
     }
   }




  }
}
