pipeline {

  agent {
            docker {
              image 'maven:3.9.6-eclipse-temurin-21-alpine'
            }
        }

  tools {
    maven 'Maven3'
  }

  environment {
        // Base directory containing pom.xml
         PROJECT_DIR = 'test_deepseek'
        // Paths relative to PROJECT_DIR
        SBOM_FILE_PATH = "${PROJECT_DIR}/target/bom.xml"
        DEP_TRACK_API_URL = 'http://localhost:8082/api'
        DEP_TRACK_API_KEY = 'odt_dWinsHFt2G95wGSjLHG5igPmGFpHqtg3'
        PROJECT_UUID = '421a9c86-4dcb-46c0-9731-0bc6cc7442f9'
  }

  stages {

            stage('Java Version Check') {
                  steps {
                    sh 'java -version'
                    sh 'mvn -version'
                  }
                }

            stage('Build') {
                  steps {
                    dir(env.PROJECT_DIR) {
                      withMaven {
                        sh """
                          mvn clean install -DskipUnitTests=true -DskipTests=true -Dinvoker.skip=true -DskipITs=true -B
                        """
                      }
                    }
                  }
                }

            stage('Generate SBOM') {
                  steps {
                    dir(env.PROJECT_DIR) {
                      withMaven {
                        sh 'mvn org.cyclonedx:cyclonedx-maven-plugin:makeAggregateBom'
                      }
                    }
                  }
                  post {
                    success {
                            echo 'SBOM file successfully generated!'
                    }
                    failure {
                             echo 'SBOM file generation failed!'
                    }
                    always {
                      archiveArtifacts artifacts: "${SBOM_FILE_PATH},${PROJECT_DIR}/target/bom.json",
                                      allowEmptyArchive: true
                    }
                  }
                }


            stage('Upload SBOM file') {
                  steps {
                    script {
                      dir(env.PROJECT_DIR) {
                        if (fileExists('target/bom.xml')) {
                             echo 'Uploading SBOM to Dependency-Track...'
                          sh """
                            curl -f -X "POST" "${DEP_TRACK_API_URL}/v1/bom" \
                              -H 'Content-Type: multipart/form-data' \
                              -H 'X-API-Key: ${DEP_TRACK_API_KEY}' \
                              -F "autoCreate=true" \
                              -F "project=${PROJECT_UUID}" \
                              -F "bom=@target/bom.xml"
                          """
                        } else {
                          error "SBOM file not found at ${SBOM_FILE_PATH}"
                        }
                      }
                    }
                  }
                  post {
                    success {
                        echo 'SBOM file successfully uploaded to Dependency-Track!'
                    }
                    failure {
                        echo 'Failed to upload SBOM file to Dependency-Track!'
                    }
                  }
                }

            stage('Check Dependency Vulnerabilities') {

                       steps {
                           script {
                               echo 'Checking vulnerabilities in Dependency-Track...'


                               // Install jq if not present
                               sh "command -v jq >/dev/null 2>&1 || (echo 'Installing jq...' && sudo apt update && sudo apt install -y jq)"
                               def response = sh(
                                   script: """
                                       curl -s -X "GET" "${DEP_TRACK_API_URL}/v1/finding/project/${PROJECT_UUID}" \\
                                            -H 'X-API-Key: ${DEP_TRACK_API_KEY}' | \\
                                       jq '[.[] | select(.analysis.isSuppressed == false) | .vulnerability.severity] |
                                           group_by(.) |
                                           map({(.[0]): length}) |
                                           add'
                                   """,
                                   returnStdout: true
                               ).trim()
                               echo "Vulnerability Report: ${response}"

                               def vulnData = readJSON text: response
                               def criticalCount = vulnData.CRITICAL ?: 0
                               def highCount = vulnData.HIGH ?: 0
                               def mediumCount = vulnData.MEDIUM ?: 0
                               def lowCount = vulnData.LOW ?: 0
                               def unassignedCount = vulnData.UNASSIGNED ?: 0
                               echo "Critical: ${criticalCount}, High: ${highCount}, Medium: ${mediumCount}, Low: ${lowCount}, Unassigned: ${unassignedCount}"
                               def vulnerabilitiesExist = (criticalCount > 0 || highCount > 0 )
                               if (vulnerabilitiesExist) {
                                   error "Pipeline aborted due to detected vulnerabilities: CRITICAL=${criticalCount}, HIGH=${highCount}"
                               } else {
                                   echo 'No critical vulnerabilities found.'
                               }
                           }
                       }
                   }


  }
}