pipeline {
  agent any

  tools {
    maven 'Maven3'
  }

  environment {
    DEP_TRACK_API_URL = 'http://localhost:8082/api'
    DEP_TRACK_API_KEY = 'odt_dWinsHFt2G95wGSjLHG5igPmGFpHqtg3'
    SBOM_FILE_PATH = 'test_deepseek/target/bom.xml' // Update the path accordingly
  }

  stages {
  

    stage('Build') {
      steps {
        script {
          try {
            withMaven(maven: 'Maven3') {
            bat 'cd test_deepseek && mvn clean install -DskipTests -Dmaven.test.skip=true'
            }
          } catch (Exception e) {
            currentBuild.result = 'FAILURE'
            throw e
          }
        }
      }
    }

    stage('Generate SBOM') {
      steps {
        withMaven {
          bat 'cd test_deepseek && mvn org.cyclonedx:cyclonedx-maven-plugin:makeAggregateBom'
        }
      }
      post {
        success {
          echo "SBOM file successfully generated!"
        }
        failure {
          echo "SBOM file generation failed!"
        }
        always {
          archiveArtifacts allowEmptyArchive: true, artifacts: 'test_deepseek/target/bom.json'
          archiveArtifacts allowEmptyArchive: true, artifacts: 'test_deepseek/target/bom.xml'
        }
      }
    }

    stage('Upload SBOM to Dependency-Track') {
      steps {
        script {
          if (fileExists(SBOM_FILE_PATH)) {
            echo 'Uploading SBOM to Dependency-Track...'
            bat """
            curl -X "POST" "${DEP_TRACK_API_URL}/v1/bom" ^
              -H "Content-Type: multipart/form-data" ^
              -H "X-API-Key: ${DEP_TRACK_API_KEY}" ^
              -F "autoCreate=false" ^
              -F "project=421a9c86-4dcb-46c0-9731-0bc6cc7442f9" ^
              -F "bom=@${SBOM_FILE_PATH}"
            """
          } else {
            echo "SBOM file not found at ${SBOM_FILE_PATH}!"
          }
        }
      }
      post {
        success {
          echo 'SBOM file successfully uploaded to Dependency-Track!'
        }
        failure {
          echo 'Failed to upload SBOM file to Dependency-Track!'
        }
      }
    }

   stage('Check Dependency Vulnerabilities') {
       steps {
           script {
               echo 'Checking vulnerabilities in Dependency-Track...'

               def projectUuid = '421a9c86-4dcb-46c0-9731-0bc6cc7442f9'

               // Modify curl command for Windows to ensure only the response is captured
               def response = bat(
                   script: """curl -s -X GET "${DEP_TRACK_API_URL}/v1/finding/project/${projectUuid}" -H "X-API-Key: ${DEP_TRACK_API_KEY}" """,
                   returnStdout: true
               ).trim()

               echo "Vulnerability Report: ${response}"  // Print the raw response

               // Add a check to ensure the response is valid JSON before parsing it
               try {
                   // Parse the JSON response using Groovy's JsonSlurper
                   def jsonSlurper = new groovy.json.JsonSlurper()
                   def vulnData = jsonSlurper.parseText(response)

                   // Count vulnerabilities by severity
                   def criticalCount = vulnData.findAll { it.analysis?.isSuppressed == false && it.vulnerability?.severity == 'CRITICAL' }.size()
                   def highCount = vulnData.findAll { it.analysis?.isSuppressed == false && it.vulnerability?.severity == 'HIGH' }.size()
                   def mediumCount = vulnData.findAll { it.analysis?.isSuppressed == false && it.vulnerability?.severity == 'MEDIUM' }.size()
                   def lowCount = vulnData.findAll { it.analysis?.isSuppressed == false && it.vulnerability?.severity == 'LOW' }.size()
                   def unassignedCount = vulnData.findAll { it.analysis?.isSuppressed == false && it.vulnerability?.severity == 'UNASSIGNED' }.size()

                   echo "Critical: ${criticalCount}, High: ${highCount}, Medium: ${mediumCount}, Low: ${lowCount}, Unassigned: ${unassignedCount}"

                   // Fail the pipeline if critical or high vulnerabilities exist
                   def vulnerabilitiesExist = (criticalCount > 0 || highCount > 0)
                   if (vulnerabilitiesExist) {
                       error "Pipeline aborted due to detected vulnerabilities: CRITICAL=${criticalCount}, HIGH=${highCount}"
                   } else {
                       echo 'No critical vulnerabilities found.'
                   }
               } catch (Exception e) {
                   echo "Error parsing the response as JSON: ${e.getMessage()}"
                   error "Invalid JSON response received."
               }
           }
       }
   }





  }
}
