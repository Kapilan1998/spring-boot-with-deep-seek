pipeline {
  agent any

  tools {
    maven 'Maven3'
  }

  environment {
    DEP_TRACK_API_URL = 'http://localhost:8081/api'
    DEP_TRACK_API_KEY = 'odt_dWinsHFt2G95wGSjLHG5igPmGFpHqtg3'
    SBOM_FILE_PATH = 'test_deepseek/target/bom.xml' // Update the path accordingly
  }

  stages {
  

    stage('Build') {
      steps {
        script {
          try {
            withMaven(maven: 'Maven3') {
              // Change directory to 'test_deepseek' before running Maven
              bat 'cd test_deepseek && mvn clean install'
            }
          } catch (Exception e) {
            currentBuild.result = 'FAILURE'
            throw e
          }
        }
      }
    }

    stage('Generate SBOM') {
      steps {
        withMaven {
          // Change directory to 'test_deepseek' before generating the SBOM
          bat 'cd test_deepseek && mvn org.cyclonedx:cyclonedx-maven-plugin:makeAggregateBom'
        }
      }
      post {
        success {
          echo "SBOM file successfully generated!"
        }
        failure {
          echo "SBOM file generation failed!"
        }
        always {
          archiveArtifacts allowEmptyArchive: true, artifacts: 'test_deepseek/target/bom.json'
          archiveArtifacts allowEmptyArchive: true, artifacts: 'test_deepseek/target/bom.xml'
        }
      }
    }

    stage('Upload SBOM to Dependency-Track') {
      steps {
        script {
          if (fileExists(SBOM_FILE_PATH)) {
            echo 'Uploading SBOM to Dependency-Track...'
            bat """
            curl -X "POST" "${DEP_TRACK_API_URL}/v1/bom" ^
              -H "Content-Type: multipart/form-data" ^
              -H "X-API-Key: ${DEP_TRACK_API_KEY}" ^
              -F "autoCreate=false" ^
              -F "project=421a9c86-4dcb-46c0-9731-0bc6cc7442f9" ^
              -F "bom=@${SBOM_FILE_PATH}"
            """
          } else {
            echo "SBOM file not found at ${SBOM_FILE_PATH}!"
          }
        }
      }
      post {
        success {
          echo 'SBOM file successfully uploaded to Dependency-Track!'
        }
        failure {
          echo 'Failed to upload SBOM file to Dependency-Track!'
        }
      }
    }

    stage('Check Dependency Vulnerabilities') {
      steps {
        script {
          echo 'Checking vulnerabilities in Dependency-Track...'

          def projectUuid = '421a9c86-4dcb-46c0-9731-0bc6cc7442f9'
          def response = bat(
            script: """
            curl -s -X "GET" "${DEP_TRACK_API_URL}/v1/finding/project/${projectUuid}" ^
              -H "X-API-Key: ${DEP_TRACK_API_KEY}" ^
              | jq "[.[] | select(.analysis.isSuppressed == false) | .vulnerability.severity] |
              group_by(.) |
              map({
                (\\"\\${0}\\"): length
              }) |
              add"
            """,
            returnStdout: true
          ).trim()

          echo "Vulnerability Report: ${response}"

          def vulnData = readJSON text: response
          def criticalCount = vulnData.CRITICAL ?: 0
          def highCount = vulnData.HIGH ?: 0
          def mediumCount = vulnData.MEDIUM ?: 0
          def lowCount = vulnData.LOW ?: 0
          def unassignedCount = vulnData.UNASSIGNED ?: 0
          echo "Critical: ${criticalCount}, High: ${highCount}, Medium: ${mediumCount}, Low: ${lowCount}, Unassigned: ${unassignedCount}"
          def vulnerabilitiesExist = (criticalCount > 0 || highCount > 0)
          if (vulnerabilitiesExist) {
            error "Pipeline aborted due to detected vulnerabilities: CRITICAL=${criticalCount}, HIGH=${highCount}"
          } else {
            echo 'No critical vulnerabilities found.'
          }
        }
      }
    }
  }
}
